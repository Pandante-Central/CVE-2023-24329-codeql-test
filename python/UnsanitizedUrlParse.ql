/**
 * @name Possible CVE-2023-24329
 * @description Possible CVE-2023-24329
 * @kind path-problem
 * @problem.severity error
 * @security-severity 8.0
 * @sub-severity critical
 * @precision low
 * @id py/cve-2023-24329
 * @tags security
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.dataflow.new.TaintTracking
import semmle.python.Concepts
import semmle.python.ApiGraphs
import semmle.python.dataflow.new.RemoteFlowSources
import semmle.python.dataflow.new.BarrierGuards
import DataFlow::PathGraph
// XSS
import semmle.python.security.dataflow.ReflectedXSSCustomizations

class CveSinks extends DataFlow::Node {
  CveSinks() {
    this =
      API::moduleImport("urllib").getMember("parse").getACall().getAMethodCall("urlparse").getArg(0)
  }
}

class Sanitizer extends DataFlow::Node {
  Sanitizer() { none() }
}

class ReplaceWhitespaceSanitizer extends Sanitizer, DataFlow::CallCfgNode {
  ReplaceWhitespaceSanitizer() {
    this.getFunction().(DataFlow::AttrRead).getAttributeName() = "replace" and
    this.getArg(0).asExpr().(StrConst).getText() in [" "]
  }
}

class CVEConfiguration extends TaintTracking::Configuration {
  CVEConfiguration() { this = "CVEConfiguration" }

  override predicate isSource(DataFlow::Node source) { source instanceof RemoteFlowSource::Range }

  override predicate isSink(DataFlow::Node sink) { sink instanceof CveSinks }

  override predicate isSanitizer(DataFlow::Node node) {
    node instanceof Sanitizer
    or
    node instanceof ReflectedXss::Sanitizer
    or
    node instanceof ReplaceWhitespaceSanitizer
  }
}

from CVEConfiguration config, DataFlow::PathNode source, DataFlow::PathNode sink
where config.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "$@ flows to here", source.getNode(), "A user-provided value"
